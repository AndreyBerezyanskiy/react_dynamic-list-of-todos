{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SortType.ts","components/TodoModal/TodoModal.tsx","utils/prepareTodos.ts","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectTodo","selectedTodo","className","map","todo","isSelectedTodo","id","cn","completed","title","type","onClick","TodoFilter","sortType","onSortTodos","onQuery","query","onClear","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SortType","TodoModal","onHideTodo","useState","user","setUser","fetchedUser","a","userId","data","console","log","Error","useEffect","href","email","name","App","setTodos","setSelectedTodo","hasError","setHasError","isLoading","setIsLoading","ALL","setSortType","setQuery","appliedQuery","setAppliedQuery","fetchedTodos","applyQuery","useCallback","debounce","handleSelectTodo","handleHideTodo","handleSetSortType","handleSetQuery","handleClearQuery","visibleTodo","useMemo","todosForRender","lowQuery","toLowerCase","filter","includes","ACTIVE","COMPLETED","prepareTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88c2c087.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  onSelectTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectTodo,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => {\n          const isSelectedTodo = todo.id === selectedTodo?.id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={cn({\n                'has-background-info-light': isSelectedTodo,\n              })}\n              key={todo.id}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className={cn({ 'fas fa-check': todo.completed })} />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded \">\n                <p className={cn(\n                  {\n                    'has-text-success': todo.completed,\n                    'has-text-danger': !todo.completed,\n                  },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onSelectTodo(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={cn({\n                      'far fa-eye': !isSelectedTodo,\n                      'far fa-eye-slash': isSelectedTodo,\n                    })}\n                    />\n                    {' '}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ninterface Props {\n  sortType: SortType;\n  onSortTodos: (event: string) => void;\n  onQuery: (event: string) => void;\n  query: string;\n  onClear: () => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  sortType,\n  onSortTodos,\n  onQuery,\n  query,\n  onClear,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={sortType}\n          onChange={(event) => onSortTodos(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => onQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"clearSearch\"\n            onClick={onClear}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum SortType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  onHideTodo: () => void;\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ onHideTodo, todo }) => {\n  const { id, title, completed } = todo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const fetchedUser = async () => {\n    try {\n      const data = await getUser(todo.userId);\n\n      setUser(data);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n      throw new Error('Sorry, something goes wrong. Please, try again later');\n    }\n  };\n\n  useEffect(() => {\n    fetchedUser();\n  }, [todo.userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {user ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onHideTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n\n              {completed\n                ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                )\n                : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user && (user.name)}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { SortType } from '../types/SortType';\n\nexport const prepareTodos = (\n  todos: Todo[],\n  query: string,\n  sortType: string,\n):Todo[] => {\n  let todosForRender = [...todos];\n\n  if (query) {\n    const lowQuery = query.toLowerCase();\n\n    todosForRender = todosForRender.filter(\n      todo => todo.title.toLowerCase().includes(lowQuery),\n    );\n  }\n\n  todosForRender = todosForRender.filter(todo => {\n    switch (sortType) {\n      case SortType.ACTIVE:\n        return !todo.completed;\n\n      case SortType.COMPLETED:\n        return todo.completed;\n\n      case SortType.ALL:\n        return true;\n\n      default:\n        throw new Error('Incorrect SortType data');\n    }\n  });\n\n  return todosForRender;\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport debounce from 'lodash.debounce';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { TodoModal } from './components/TodoModal';\nimport { prepareTodos } from './utils/prepareTodos';\nimport { SortType } from './types/SortType';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [sortType, setSortType] = useState(SortType.ALL);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  const fetchedTodos = async () => {\n    try {\n      const data = await getTodos();\n\n      setTodos(data);\n      setIsLoading(false);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n      setHasError(true);\n    }\n  };\n\n  useEffect(() => {\n    fetchedTodos();\n  }, []);\n\n  const applyQuery = useCallback(debounce(setAppliedQuery, 1000), []);\n\n  const handleSelectTodo = useCallback((todo: Todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const handleHideTodo = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const handleSetSortType = useCallback((event: string) => {\n    setSortType(event as SortType);\n  }, []);\n\n  const handleSetQuery = useCallback((event: string) => {\n    setQuery(event);\n    applyQuery(event);\n  }, []);\n\n  const handleClearQuery = useCallback(() => {\n    setQuery('');\n    setAppliedQuery('');\n  }, []);\n\n  const visibleTodo = useMemo(() => (\n    prepareTodos(todos, appliedQuery, sortType)),\n  [todos, appliedQuery, sortType]);\n\n  if (hasError) {\n    return (<span>Sorry, no todos at this moment</span>);\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                sortType={sortType}\n                onSortTodos={handleSetSortType}\n                onQuery={handleSetQuery}\n                query={query}\n                onClear={handleClearQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodo}\n                    onSelectTodo={handleSelectTodo}\n                    selectedTodo={selectedTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal onHideTodo={handleHideTodo} todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}